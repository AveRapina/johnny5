
#include <iostream>
#include <pigpio.h>

#define PIN_MOTOR_L_ENA (05)
#define PIN_MOTOR_L_DIR (06)
#define PIN_MOTOR_L_PWM (12)

#define PIN_MOTOR_R_ENA (19)
#define PIN_MOTOR_R_DIR (16)
#define PIN_MOTOR_R_PWM (13)

#define PWM_FREQ_L (10000)
#define PWM_FREQ_R (10000)
#define PWM_RANGE (1000000)
#define PWM_DUTY_CYCLE (0.25)
#define PWM_DUTY_CYCLE_SET (PWM_DUTY_CYCLE * PWM_RANGE)

#define MOTOR_POS	(0)
#define MOTOR_NEG	(1)

#define MOTOR_ENABLE	(1)
#define MOTOR_DISABLE	(0)

using namespace std;

typedef struct _MOTOR
{
	//gpio
	int gpioENA;
	int gpioDIR;
	int gpioPWM;

	//control
	int enable;
	int direction;
	int speed;		//frequency of PWM
	int dutyCycle;	//duty cycle of PWM
}MOTOR, *pMOTOR

MOTOR motorL = {PIN_MOTOR_L_ENA, PIN_MOTOR_L_DIR, PIN_MOTOR_L_PWM, 0, 0, 0, 0};
MOTOR motorR = {PIN_MOTOR_R_ENA, PIN_MOTOR_R_DIR, PIN_MOTOR_R_PWM, 0, 0, 0, 0};

void motorInit()
{
	pwmInit(&motorL);
	pwmInit(&motorR);
}

void pwmInit(pMotor p)
{
	gpioSetMode(p.gpioENA, PI_OUTPUT);
	gpioSetMode(PIN_MOTOR_L_ENA, PI_OUTPUT);
	gpioSetMode(PIN_MOTOR_L_DIR, PI_OUTPUT);

	gpioSetMode(PIN_MOTOR_R_PWM, PI_OUTPUT);
	gpioSetMode(PIN_MOTOR_R_ENA, PI_OUTPUT);
	gpioSetMode(PIN_MOTOR_R_DIR, PI_OUTPUT);

	gpioCfgClock(5,1,0);	//sample rate 5ms, clock source from PCM, reserved

	gpioHardwarePWM(PIN_MOTOR_L_PWM, 0, 0);
	gpioHardwarePWM(PIN_MOTOR_R_PWM, 0, 0);

	//gpioPWM(PIN_MOTOR_L_PWM, 0);
	//gpioSetPWMrange(PIN_MOTOR_L_PWM, PWM_RANGE);
	//gpioSetPWMfrequency(PIN_MOTOR_L_PWM, PWM_FREQ);
	//gpioPWM(PIN_MOTOR_L_PWM, PWM_DUTY_CYCLE_SET);
}

void motorEnable(int gpio, int enable)
{
	gpioWrite(PIN_MOTOR_L_ENA, enable);
}

void motorDirecton(int gpio, int direction)
{
	gpioWrite(PIN_MOTOR_L_ENA, direction);
}

void motorSpeed(int gpio, int speed)
{
	gpioHardwarePWM(gpio, PWM_FREQ, speed);
}

int main()
{
	int chr;
	gpioInitialise();
	
	pwmInit();
	
	
	cin>>chr;

	gpioHardwarePWM(PIN_MOTOR_L_PWM, 0, 0);
	gpioTerminate();
	return 0;
}
